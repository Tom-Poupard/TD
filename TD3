#Exemple de cours
class Bond : 

    def __init__(self, par_value, coupon_rate, maturity):
        self.par_value = par_value
        self.coupon_rate = coupon_rate
        self.maturity = maturity

    def current_yield(self, market_price):
        return (self.coupon_rate * self.par_value) / market_price

ten_year_note = Bond(1000, 0.025, 10)
yield_on_note = ten_year_note.current_yield(950)
print(yield_on_note)

------------------------------------------------------------

#Exo 1 OOP Exercies
class Stock :
    
    def __init__(self, stock_name, current_price, dividend):
        self.stock_name = stock_name
        self.current_price = current_price
        self.dividend = dividend
        
    def yield_dividend (self) :
        return (self.dividend / self.current_price) *100

stock1 = Stock("AAPL", 172.88, 10)
print("Le current yield d'Apple est : " , str(stock1.yield_dividend()) + "%")

------------------------------------------------------------

#Exo2 OOP Exercises
class Stock: #this class represents financial instruments like stocks w/ name & current price
    def __init__(self, name, current_price): 
        self.name = name
        self.current_price = current_price

class Portfolio: 
    def __init__(self):
        self.instruments = {} #A dictionary to store instruments and their current prices

    def add_instrument(self, name, current_price): #This method adds a financial instrument to the portfolio
        stock = Stock(name, current_price) #we create an object "Stock" from the Stock class.
        self.instruments[name] = stock #We stock this object in the dictionary "self.instruments"

    def total_value(self):
        total_value = 0
        for name, stock in self.instruments.items(): #In the dictionary self.instruments, at every iteration, stock takes the value of the object Stock
            total_value += stock.current_price # we add the current price of the instrument in the total_value
        return total_value

# Example usage:
my_portfolio = Portfolio()

# Adding financial instruments to the portfolio
my_portfolio.add_instrument('Apple', 172.88)
my_portfolio.add_instrument('GOOGL', 135.60)
my_portfolio.add_instrument('Bonds', 950.0)

# Calculate the total value of the portfolio based on current prices

portfolio_value = my_portfolio.total_value()
print(f'Total Portfolio Value: ${portfolio_value:.2f}') # 2f = 2 chiffres après la virgule

------------------------------------------------------------

class CurrencyConverter:
    def __init__(self):
        self.conversion_rates = {} #Initialize a dictionary (called conversion_rates) to store conversion rates w/empty dictionary

    def add_conversion_rate(self, source_currency, target_currency, rate): #We add a conversion rate to the dictionary
        self.conversion_rates[(source_currency, target_currency)] = rate # we attribute the rate to a specific key in the dictionary. The key is here a tuple. Hence, the rate associated to a specific FX pair 

    def convert(self, amount, source_currency, target_currency):
        if (source_currency, target_currency) in self.conversion_rates: #Is the pair in the dictionary self.conversion_rates ? 
            rate = self.conversion_rates[(source_currency, target_currency)] # we extract the rate of the currency pairs
            converted_amount = amount * rate
            return converted_amount
        else:# Conversion is not possible
            return None

if __name__ == "__main__": #we are checking if the program is autonomous or imported from an other source
    converter = CurrencyConverter()

    # Add conversion rates to the converter
    converter.add_conversion_rate("USD", "EUR", 0.85)  #1 USD = 0.85 EUR
    converter.add_conversion_rate("EUR", "JPY", 130.00)  #1 EUR = 130 JPY
    converter.add_conversion_rate("GBP", "USD", 1.30)  #1 GBP = 1.30 USD

    # Test the conversion
    amount = 100  # Amount in source currency
    source_currency = "GBP"
    target_currency = "USD"
    converted_amount = converter.convert(amount, source_currency, target_currency) #we can also change the values in the ()

    if converted_amount is not None:
        print(f"{amount} {source_currency} is equivalent to {converted_amount} {target_currency}")
    else:
        print("Conversion is not possible for the given currencies.")

------------------------------------------------------------
# MATHEMATICAL TOOLS WITH NumPY Exos  EXO1

import numpy as np
np.random.seed(0) #We initiate the generation of random numbers with the seed 0. Hence, we will always have the same sequence of random numbers. Reproducibility
daily_returns = np.random.normal(0.001, 0.02, 1000) #Normal law with mean = 0.001, sd = 0.02 and 1000 = nb of days
stock_prices = [100] #the initial sotck price is 100 
for r in daily_returns : # r represents every element of the daily_returns sequence. r changes its value every time there is a loop (1000 values in total) 
    stock_prices.append(stock_prices[-1]*(1 + r)) # We add in the stock_prices list the previous stock price * (1+r). [-1] = last element of the list.
print(stock_prices[-1]) # After 1000 loops (days), we want to print the final stock price which is the last element of the list "stock_prices" so we put [-1]

------------------------------------------------------------

# EXO 2 Portfolio Variance

sd1 = 0.1
sd2 = 0.2
w1 = 0.6
w2 = 0.4
corr = 0.5

portfolio_variance = w1**2*sd1**2 + w2**2*sd2**2 + 2*w1*w2*sd1*sd2*corr

print(portfolio_variance)

------------------------------------------------------------

# EXO3 EFFICIENT FRONTIER

import numpy as np
returns = np.array([0.10, 0.15]) #Annual returns
volatilities = np.array([0.20, 0.30]) #Annual volatilities

#Define the range of weight combinations you want to test
num_combinations = 5  #You can change this to any desired number of combinations
weights = np.linspace(0, 1, num_combinations)  #Create weights between 0 and 1

#Initialize lists to store calculated returns and volatilities
portfolio_returns = [] 
portfolio_volatilities = [] 

# Calculate portfolio returns and volatilities for various weight combinations
for w in weights:
    portfolio_return = np.dot(returns, [w, 1 - w])  #Weighted sum of returns / w for 1st return
    portfolio_volatility = np.sqrt(np.dot(np.dot([w, 1 - w], np.diag(volatilities)), [w, 1 - w]))  #Portfolio volatility + np.diag(vol) --> diagonal matrix w/volatilities + produit scalaire
                            #produit scalaire entre le vecteur de poids et le vecteur de volatilités => contribution de la vol pour chaque actif. Puis multiplication par [w, 1-w] (vecteur de poids) pour avoir la volatilité globale du portefeuille.   
    
    portfolio_returns.append(portfolio_return) #we add the return to the portfolio return for each loop
    portfolio_volatilities.append(portfolio_volatility)

print("Weight | Portfolio Return | Portfolio Volatility")
for i in range(len(weights)):
    print(f"{weights[i]:.2f} | {portfolio_returns[i]:.4f} | {portfolio_volatilities[i]:.4f}")

------------------------------------------------------------

# DATA VISUALIZATION TOOLS

import matplotlib.pyplot as plt #Python library to create static, animated, and interactive visualizations. pyplot --> for plots and charts
import seaborn as sns #provides high-level interface for creating aesthetically pleasing and informative statistical graphics

stock_prices = [100, 102, 104, 103, 105, 107, 108]
dates = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
plt.figure(figsize=(10, 6))  #width = 10 inches & heigth = 6 inches
sns.lineplot(x = dates, y = stock_prices)
plt.title('Stock Price Over a Week')
plt.xlabel('Days')
plt.ylabel('Stock Price')
plt.grid(True)
plt.show()

------------------------------------------------------------

# EXO 1 Plotting Stock Prices using Matplotlib

import matplotlib.pyplot as plt

stock_prices1 = [105, 103, 106, 109, 108, 107, 110, 112, 111, 113]
stock_prices2 = [107, 108, 107, 107, 106, 108, 109, 108, 109, 110]
plt.plot(stock_prices1, label = "Stock 1", color = 'red') #creation of a lin plot using data in stock_prices list
plt.plot(stock_prices2, label = "Stock 2", color = 'blue')

plt.title('Stock Prices 1 & 2 Over 10 Days') #graph title
plt.xlabel('Days') #abscissa
plt.ylabel('Stock Price')#ordinate
plt.legend() #legend to identify them
plt.show() #display the plot

------------------------------------------------------------


# EXO 2 Visualizing Distributions using Seaborn

import matplotlib.pyplot as plt
import seaborn as sns

returns = [0.05, -0.02, 0.03, -0.01, 0.02, 0.03, -0.03, 0.01, 0.04, -0.01]
sns.histplot(returns, bins=5, kde=True) # histplot --> create histogram // bins = nb of interval (5) // kde = Kernel Density Estimation (estimate of the probability density function)
plt.title('Distribution of Stock Returns')
plt.show()

------------------------------------------------------------

